name: CI

# Controls when the workflow will run.
on:
  # When creating a new pull request to the 'develop' branch.
  pull_request:
    branches: [ develop ]
    paths-ignore: [ '**.md' ]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:
    inputs:
      scenarioTag:
        description: 'Scenario Tag to execute(e.g. "@TC-00001")'
        type: string
        required: false
        default: '@Regression'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:

  build:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    # Using a Docker Container.
    container:
      image: gradle:6.9.2-jdk8

    # Execute when a specific label('review_start') is added to Pull request
    # or is executed manually.
    if: contains(github.event.pull_request.labels.*.name, 'review_start') || github.event_name == 'workflow_dispatch'
    steps:
      # Cloning you repository to the runner.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build project
        run: gradle assemble

      - name: Build testClasses
        run: gradle assemble testClasses

  # Checkstyle and PMD.
  static-analysis:
    needs: build
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    # Using a Docker Container.
    container:
      image: gradle:6.9.2-jdk8

    steps:
      # Cloning you repository to the runner.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Execute Checkstyle and PMD
        run: gradle staticAnalysis
      - uses: actions/upload-artifact@v3
        with:
          name: staticAnalysisReports${{ github.run_id }}
          path: ./build/reports
          retention-days: 5

  # Documentation generation.
  javadoc:
    needs: build
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    # Using a Docker Container.
    container:
      image: gradle:6.9.2-jdk8

    steps:
      # Cloning you repository to the runner.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Execute Javadoc
        run: gradle javadoc
      - uses: actions/upload-artifact@v3
        with:
          name: javadoc${{ github.run_id }}
          path: ./build/docs/javadoc
          retention-days: 5

  execution:
    needs: [static-analysis, javadoc]
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    # Using a Docker Container.
    container:
      image: gradle:6.9.2-jdk8
    # These permissions are required to generate reports.
    permissions:
      contents: write # To push a branch (gh_pages).
      checks: write   # dorny/test-reporter actions requires checks: write permissions
      # to post a check with test reports in the GitHub Action Summary(Unit test).

    steps:
      # Cloning you repository to the runner.
      - name: Checkout code
        uses: actions/checkout@v3

      # Get the test case tag from the branch name.
      # Eg.
      # feature/TC-00004 -> "@TC-00004"
      # feature/Improve_CI -> "@Regression" -  The value set in variables on GitHub.
      - id: get-id
        if: always()
        env:
          BRANCH: ${{ github.head_ref }}
        run: |
          idTag=${BRANCH##*/}
          if [[ $idTag = TC* ]]; then
           echo "tag=@$idTag" >> $GITHUB_OUTPUT
          else
           echo "tag=${{ vars.SCENARIO_TAG }}" >> $GITHUB_OUTPUT
          fi

      - name: Execute Features
        id: execute-features
        # Configuration variables in your repository.
        # Settings -> Secrets and variables -> Actions -> Secrets(secrets) or Variables(vars).
        run: |
          gradle executeFeatures \
              -Dcucumber.filter.tags="${{ github.event.inputs.scenarioTag || steps.get-id.outputs.tag }}" \
              -Pbrowser="CHROME_HEADLESS" \
              -PbaseUrl="${{ vars.BASE_URL }}" \
              -Puser="${{ vars.USER_EMAIL }}" -Ppassword="${{ secrets.USER_PASSWORD }}" \
              -PapiUrl="${{ vars.API_URL }}" \
              -PapiKey="${{ secrets.API_KEY }}" -PapiToken="${{ secrets.API_TOKEN }}"

      # Re-execute if there are failed scenarios using the 'rerun.txt' file.
      - name: Re-Execute Features
        if: ${{ failure() && steps.execute-features.conclusion == 'failure' }}
        run: |
          gradle reExecuteFeatures \
              -Pbrowser="CHROME_HEADLESS" \
              -PbaseUrl="${{ vars.BASE_URL }}" \
              -Puser="${{ vars.USER_EMAIL }}" -Ppassword="${{ secrets.USER_PASSWORD }}" \
              -PapiUrl="${{ vars.API_URL }}" \
              -PapiKey="${{ secrets.API_KEY }}" -PapiToken="${{ secrets.API_TOKEN }}"

      # Upload Allure report.
      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: allureReport${{ github.run_id }}
          path: ./build/allure
          retention-days: 5
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`.

      # Upload log file.
      - name: Upload log file
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs${{ github.run_id }}
          path: ./logs
          retention-days: 5

      # Execute unit tests.
      - name: Unit tests
        if: always()
        run: gradle test

      # Generate report in GitHub action summary.
      - name: Unit test reporter
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: unit-tests
          path: "./build/reports/tests/test/xml/TEST-*.xml"
          reporter: java-junit
          fail-on-error: false
