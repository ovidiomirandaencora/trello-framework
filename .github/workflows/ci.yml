name: CI

# Controls when the workflow will run.
on:
  # When creating a new pull request to the 'develop' branch.
  pull_request:
    branches: [ develop ]
    paths-ignore: [ '**.md' ]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:

  build:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    # Execute when a specific label('review_start') is added to Pull request.
    if: contains(github.event.pull_request.labels.*.name, 'review_start')

    steps:
      # Cloning you repository to the runner.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8 for x64
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'temurin'
          architecture: x64

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
            gradle-version: 6.9
      - run: gradle assemble
      - run: gradle assemble testClasses

  # Checkstyle and PMD.
  static-analysis:
    needs: build
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest

    steps:
      # Cloning you repository to the runner.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8 for x64
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'temurin'
          architecture: x64

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 6.9
      - run: gradle staticAnalysis
      - uses: actions/upload-artifact@v3
        with:
          name: staticAnalysisReports${{github.run_id}}
          path: ./build/reports
          retention-days: 5

  # Documentation generation.
  javadoc:
    needs: build
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest

    steps:
      # Cloning you repository to the runner.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8 for x64
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'temurin'
          architecture: x64

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 6.9
      - run: gradle javadoc
      - uses: actions/upload-artifact@v3
        with:
          name: javadoc${{github.run_id}}
          path: ./build/docs/javadoc
          retention-days: 5

  execution:
    needs: [static-analysis, javadoc]
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    # These permissions are required to generate reports.
    permissions:
      contents: write # To push a branch (gh_pages).
      checks: write   # dorny/test-reporter actions requires checks: write permissions
                      # to post a check with test reports in the GitHub Action Summary(Unit test).

    steps:
      # Cloning you repository to the runner.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8 for x64
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'temurin'
          architecture: x64

      - name: Install and setup latest Google Chrome
        uses: browser-actions/setup-chrome@v1
      - run: chrome --version

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 6.9
        run: gradle --version

      - name: Execute Features
        # Configuration variables in your repository.
        # Settings -> Secrets and variables -> Actions -> Secrets(secrets) or Variables(vars).
        run: |
          gradle executeFeatures \
              -Dcucumber.filter.tags="${{github.event.inputs.scenarioTag || '@Regression' }}" \
              -Pbrowser="CHROME_HEADLESS" \
              -PbaseUrl="${{vars.BASE_URL}}" \
              -Puser="${{vars.USER_EMAIL}}" -Ppassword="${{secrets.USER_PASSWORD}}" \
              -PapiUrl="${{vars.API_URL}}" \
              -PapiKey="${{secrets.API_KEY}}" -PapiToken="${{secrets.API_TOKEN}}"

      - name: Get Allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Allure Report action from marketplace
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: ./build/allure/allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

      # Upload log file.
      - name: Upload log file
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs${{github.run_id}}
          path: ./logs
          retention-days: 5

      # Execute unit tests.
      - name: Unit tests
        if: always()
        run: gradle test

      # Generate report in GitHub action summary.
      - name: Unit test reporter
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: unit-tests
          path: "./build/reports/tests/test/xml/TEST-*.xml"
          reporter: java-junit
          fail-on-error: false
