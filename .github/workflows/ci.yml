name: CI

# Controls when the workflow will run.
on:
  # When creating a new pull request to the 'develop' branch.
  pull_request:
    branches: [ develop ]
    paths-ignore: [ '**.md' ]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      scenarioTag:
        description: 'Scenario Tag to execute(e.g. "@TC-00001")'
        type: string
        required: false
        default: '@Regression'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:

  build:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    # Execute when a specific label('review_start') is added to Pull request
    # or is executed manually.
    if: contains(github.event.pull_request.labels.*.name, 'review_start') || github.event_name == 'workflow_dispatch'
    steps:
      # Cloning you repository to the runner.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8 for x64
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'temurin'
          architecture: x64

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 6.9
      - run: gradle assemble
      - run: gradle assemble testClasses

  # Checkstyle and PMD.
  static-analysis:
    needs: build
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest

    steps:
      # Cloning you repository to the runner.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8 for x64
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'temurin'
          architecture: x64

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 6.9
      - run: gradle staticAnalysis
      - uses: actions/upload-artifact@v3
        with:
          name: staticAnalysisReports${{ github.run_id }}
          path: ./build/reports
          retention-days: 5

  # Documentation generation.
  javadoc:
    needs: build
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest

    steps:
      # Cloning you repository to the runner.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8 for x64
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'temurin'
          architecture: x64

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 6.9
      - run: gradle javadoc
      - uses: actions/upload-artifact@v3
        with:
          name: javadoc${{ github.run_id }}
          path: ./build/docs/javadoc
          retention-days: 5

  execution:
    needs: [static-analysis, javadoc]
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    # These permissions are required to generate reports.
    permissions:
      contents: write # To push a branch (gh_pages).
      checks: write   # dorny/test-reporter actions requires checks: write permissions
      # to post a check with test reports in the GitHub Action Summary(Unit test).

    steps:
      # Get the test case tag from the branch name.
      # Eg.
      # feature/TC-00004 -> "@TC-00004"
      # feature/Improve_CI -> "@Regression" -  The value set in variables on GitHub.
      - id: get-id
        env:
          BRANCH: ${{ github.head_ref }}
        run: |
          idTag=${BRANCH##*/}
          if [[ $idTag = TC* ]]; then
           echo "tag=@$idTag" >> $GITHUB_OUTPUT
          else
           echo "tag=${{ vars.SCENARIO_TAG }}" >> $GITHUB_OUTPUT
          fi

      - name: Execute Features
        if: always()
        uses: ./.github/actions/execute_features
        with:
          scenarioTag: ${{ github.event.inputs.scenarioTag || steps.get-id.outputs.tag }}
          baseUrl: ${{ vars.BASE_URL }}
          userEmail: ${{ vars.USER_EMAIL }}
          userPassword: ${{ secrets.USER_PASSWORD }}
          apiUrl: ${{ vars.API_URL }}
          apiKey: ${{ secrets.API_KEY }}
          apiToken: ${{ secrets.API_TOKEN }}

      # Upload Allure report.
      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: allureReport${{ github.run_id }}
          path: ./build/allure
          retention-days: 5
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`.

      # Execute unit tests.
      - name: Unit tests and reporting
        if: always()
        uses: ./.github/actions/unit_test
        with:
          path: "./build/reports/tests/test/xml/TEST-*.xml"

  call-workflow:
    # Reusable workflows in the same repository.
    uses: ./.github/workflows/sonarcloud.yml
    secrets:
      sonarCloudToken: ${{ secrets.SONAR_TOKEN }}
